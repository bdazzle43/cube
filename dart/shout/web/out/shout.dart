// Auto-generated from shout.html.
// DO NOT EDIT.

library shout_html;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'dart:html';


// Original code


final __changes = new __observe.Observable();

String __$shoutThis = '';
String get shoutThis {
  if (__observe.observeReads) {
    __observe.notifyRead(__changes, __observe.ChangeRecord.FIELD, 'shoutThis');
  }
  return __$shoutThis;
}
set shoutThis(String value) {
  if (__observe.hasObservers(__changes)) {
    __observe.notifyChange(__changes, __observe.ChangeRecord.FIELD, 'shoutThis',
        __$shoutThis, value);
  }
  __$shoutThis = value;
}

void main() {
}

@observable
String palindrome() {
  var buffer = new StringBuffer(shoutThis);
  for (int i = shoutThis.length - 1; i >= 0; i--) {
    buffer.write(shoutThis[i]);
  }
  return buffer.toString();
}

// Additional generated code
void init_autogenerated() {
  var __root = autogenerated.document.body;
  var __e0, __e2, __e4, __e6, __e8;
  var __t = new autogenerated.Template(__root);
  __e0 = __root.nodes[3];
  __t.listen(__e0.onInput, ($event) { shoutThis = __e0.value; });
  __t.oneWayBind(() => shoutThis, (e) { if (__e0.value != e) __e0.value = e; }, false, false);
  __e2 = __root.nodes[5];
  var __binding1 = __t.contentBind(() =>  shoutThis.length , false);
  __e2.nodes.addAll([new autogenerated.Text('Lenght: '),
      __binding1]);
  __e4 = __root.nodes[7];
  var __binding3 = __t.contentBind(() =>  shoutThis.toUpperCase() , false);
  __e4.nodes.addAll([new autogenerated.Text('Shouted: '),
      __binding3]);
  __e6 = __root.nodes[9];
  var __binding5 = __t.contentBind(() =>  (shoutThis.length >= 6) ?
                        shoutThis.substring(1, 5) :
                        shoutThis.substring(0, 0) , false);
  __e6.nodes.addAll([new autogenerated.Text('Substring: '),
      __binding5]);
  __e8 = __root.nodes[11];
  var __binding7 = __t.contentBind(() =>  palindrome() , false);
  __e8.nodes.addAll([new autogenerated.Text('Palindromic: '),
      __binding7]);
  __t.create();
  __t.insert();
}

//@ sourceMappingURL=shout.dart.map